name: Deploy NuGet Package

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Exit if the commit was made by GitHub Actions
      - name: Check if triggered by bot
        run: |
          if [[ "${{ github.actor }}" == "github-actions[bot]" ]]; then
            echo "Triggered by GitHub Actions. Skipping workflow."
            exit 0
          fi

      - name: Install libssl
        run: |
          sudo apt-get update
          sudo apt-get install libssl1-dev    
          
      # Setup .NET (use a version compatible with .NET Standard 2.1)
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x

      # Increment version in the .csproj file
      - name: Increment Version
        run: |
          # Extract current version
          VERSION=$(grep -oP '(?<=<Version>)[0-9]+\.[0-9]+\.[0-9]+' FG.CsvParser/FG.CsvParser.csproj)
          echo "Current version: $VERSION"

          # Increment patch version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"

          # Update the version in the .csproj file
          sed -i "s/<Version>$VERSION<\/Version>/<Version>$NEW_VERSION<\/Version>/" FG.CsvParser/FG.CsvParser.csproj

      # Commit the new version to the repository
      - name: Commit Updated Version
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "actions@github.com"
          git add FG.CsvParser/FG.CsvParser.csproj
          git commit -m "Bump Nuget package version to $NEW_VERSION"
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:master

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore
        env:
          DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: true

      # Run unit tests
      - name: Run Unit Tests
        run: dotnet test --configuration Release --no-build

      # Build the project
      - name: Build Project
        run: dotnet build --configuration Release

      # Pack the NuGet package
      - name: Pack NuGet Package
        run: dotnet pack FG.CsvParser/FG.CsvParser.csproj --configuration Release --output ./nupkg

      # Publish the NuGet package
      - name: Publish to NuGet
        run: |
          dotnet nuget push ./nupkg/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
